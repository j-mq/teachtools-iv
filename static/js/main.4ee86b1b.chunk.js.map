{"version":3,"sources":["tailwindcomps/VideoControls.tsx","tailwindcomps/QuestionSet.tsx","tailwindcomps/Results.tsx","tailwindcomps/Layout.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["VideoControls","url","getPlaying","setPlaying","getPlayedState","setPlayer","player","useRef","useEffect","current","playing","onProgress","onPlay","onStart","controls","ref","QuestionSet","stopPoint","currentStopPoint","answerQuestion","className","questionTitle","answers","map","answer","index","type","onClick","title","Results","results","retryQuestion","goToQuestion","result","taken","time","question","passed","Layout","VideoData","videoData","stopPoints","orderedStopPoints","sort","a","b","initialResults","useState","playedSeconds","setPlayedSeconds","allStopPoints","setAllStopPoints","setResults","setCurrentStopPoint","stopOnPoint","length","forEach","point","Math","trunc","state","newAllStopPoints","filter","newResults","correctAnswer","seekTo","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4ee86b1b.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactPlayer from \"react-player\";\nimport { useRef, useEffect } from \"react\";\n\ntype Props = {\n  url: string;\n  setPlaying: boolean;\n  getPlaying: () => void;\n  getPlayedState: (state: {\n    played: number;\n    playedSeconds: number;\n    loaded: number;\n    loadedSeconds: number;\n  }) => void;\n\n  setPlayer: (player: any) => void;\n};\n\nconst VideoControls: React.FC<Props> = ({\n  url,\n  getPlaying,\n  setPlaying,\n  getPlayedState,\n  setPlayer,\n}) => {\n  const player = useRef(null);\n\n  useEffect(() => {\n    if (player.current) {\n      setPlayer(player.current);\n    }\n  }, [player]);\n\n  return (\n    <ReactPlayer\n      url={url}\n      playing={setPlaying}\n      onProgress={getPlayedState}\n      onPlay={getPlaying}\n      onStart={getPlaying}\n      controls={true}\n      ref={player}\n    />\n  );\n};\n\nexport default VideoControls;\n","import React from \"react\";\nimport { Answer, StopPoint } from \"../shared/types\";\n\ntype Props = {\n  currentStopPoint: StopPoint;\n  playing: boolean;\n  answerQuestion: (stopPoint: StopPoint, answer: Answer) => void;\n};\n\nconst QuestionSet: React.FC<Props> = ({\n  currentStopPoint,\n  answerQuestion,\n  playing,\n}) => {\n  const answers = (stopPoint: StopPoint) =>\n    stopPoint.answers.map((answer, index) => {\n      return (\n        <>\n          <button\n            type='button'\n            key={index}\n            onClick={() => answerQuestion(stopPoint, answer)}\n            className='flex items-center text-sm text-left'\n          >\n            <div className='font-bold text-2xl text-white bg-purple-600 hover:bg-purple-400 py-2 px-3 mr-3 rounded-md shadow-sm'>\n              {index}\n            </div>\n            {answer.title}\n          </button>\n        </>\n      );\n    });\n\n  return currentStopPoint ? (\n    //&& !playing\n    <>\n      <div className='font-bold text-2xl mb-4'>\n        {currentStopPoint.questionTitle}\n      </div>\n      <div className='grid grid-flow-row sm:grid-cols-2 grid-rows-2 gap-4'>\n        {answers(currentStopPoint)}\n      </div>\n    </>\n  ) : (\n    <></>\n  );\n};\n\nexport default QuestionSet;\n","import React from \"react\";\n\ntype Props = {\n  results: {\n    time: number;\n    passed: boolean;\n    taken: boolean;\n    question: string;\n  }[];\n  retryQuestion: (time: number) => void;\n  goToQuestion: (time: number) => void;\n};\n\nconst Results: React.FC<Props> = ({ results, retryQuestion, goToQuestion }) => {\n  return (\n    <>\n      {results.map((result, index) => (\n        <div\n          key={index}\n          className='grid grid-flow-row grid-cols-6 gap-4 text-xs mb-3'\n        >\n          <button\n            className={`${\n              !result.taken ? \"text-gray-400\" : \"\"\n            } hover:text-gray-700 col-span-4 text-left`}\n            onClick={() => goToQuestion(result.time)}\n          >\n            Q{index + 1}. {result.question}\n          </button>\n\n          <div className='flex justify-center items-center text-lg w-5 ml-auto mr-2'>\n            {result.taken && (\n              <i\n                className={`${\n                  result.passed\n                    ? \"text-red-400 fa fa-check-circle\"\n                    : \"text-blue-400 fa fa-times\"\n                }`}\n              ></i>\n            )}\n          </div>\n\n          {result.taken && !result.passed && (\n            <button\n              className='flex justify-start items-center bg-pink-400 py-2 pl-2 pr-4 hover:bg-pink-200 -mr-14'\n              onClick={() => retryQuestion(result.time)}\n            >\n              Retry\n            </button>\n          )}\n          {/* <div key={index} className='flex justify-start text-left text-xs mb-3'>\n            <button\n            className={`${\n              !result.taken ? \"text-gray-400\" : \"\"\n            } hover:text-gray-700`}\n            onClick={() => goToQuestion(result.time)}\n          >\n            Q{index + 1}. {result.question}\n          </button>\n\n          <div className='flex justify-center items-center text-lg w-5 ml-auto mr-2'>\n            {result.taken && (\n              <i\n                className={`${\n                  result.passed\n                    ? \"text-red-400 fa fa-check-circle\"\n                    : \"text-blue-400 fa fa-times\"\n                }`}\n              ></i>\n            )}\n          </div>\n\n          {result.taken && !result.passed && (\n            <button\n              className='bg-pink-400 py-2 pl-2 pr-4 hover:bg-pink-200 -mr-14'\n              onClick={() => retryQuestion(result.time)}\n            >\n              Retry\n            </button>\n          )} */}\n          {/* Q{index + 1}({result.time}secs):{\" \"}\n            {result.taken ? \"TAKEN\" : \"NOT_ANSWERED\"}\n            {result.taken ? (result.passed ? \" GOOD\" : \" BAD\") : \"\"}{\" \"}\n            {result.taken && (\n              <button onClick={() => retryQuestion(result.time)}>Retry</button>\n            )}\n            <button onClick={() => goToQuestion(result.time)}>\n              Go to question\n            </button> */}\n        </div>\n      ))}\n      {/* Correctly answered:{\" \"}\n      {results.filter((result) => result.passed && result.taken).length}/\n      {results.length} */}\n    </>\n  );\n};\n\nexport default Results;\n","import VideoControls from \"./VideoControls\";\nimport QuestionSet from \"./QuestionSet\";\nimport Results from \"./Results\";\nimport VideoData from \"../videoData.json\";\nimport { useState, useEffect } from \"react\";\nimport { Answer, StopPoint } from \"../shared/types\";\n\nconst Layout = () => {\n  const { url, stopPoints } = VideoData.videoData;\n\n  const orderedStopPoints = [\n    ...stopPoints.sort((a, b) => {\n      return a[\"time\"] - b[\"time\"];\n    }),\n  ];\n\n  const initialResults = orderedStopPoints.map((stopPoint) => {\n    return {\n      time: stopPoint.time,\n      passed: false,\n      taken: false,\n      question: stopPoint.questionTitle,\n    };\n  });\n\n  const [playedSeconds, setPlayedSeconds] = useState<number>(0);\n  const [playing, setPlaying] = useState<boolean>(false);\n  const [allStopPoints, setAllStopPoints] =\n    useState<StopPoint[]>(orderedStopPoints);\n  const [results, setResults] = useState<\n    {\n      time: number;\n      passed: boolean;\n      taken: boolean;\n      question: string;\n    }[]\n  >(initialResults);\n  const [currentStopPoint, setCurrentStopPoint] = useState<StopPoint>(\n    orderedStopPoints[0]\n  );\n  const [player, setPlayer] = useState<any | null>(null);\n\n  useEffect(() => {\n    stopOnPoint(playedSeconds);\n  }, [playedSeconds]);\n\n  const stopOnPoint = (playedSeconds: number) => {\n    if (allStopPoints.length > 0) {\n      allStopPoints.forEach((point) => {\n        if (Math.trunc(playedSeconds) === point.time) {\n          setCurrentStopPoint(point);\n          setPlaying(false);\n        }\n      });\n    }\n  };\n\n  const answerQuestion = (point: StopPoint, answer: Answer) => {\n    const newAllStopPoints = allStopPoints.filter(\n      (stopPoint) => stopPoint.time !== point.time\n    );\n    setAllStopPoints(newAllStopPoints);\n    const newResults = results.map((result) => {\n      return result.time === point.time\n        ? {\n            ...result,\n            passed: answer.correctAnswer,\n            taken: true,\n          }\n        : result;\n    });\n    setResults(newResults);\n    setPlaying(true);\n  };\n\n  const retryQuestion = (time: number) => {\n    const question = orderedStopPoints.filter(\n      (stopPoint) => stopPoint.time === time\n    )[0];\n    const newAllStopPoints = [...allStopPoints, question];\n    setAllStopPoints(newAllStopPoints);\n    const newResults = results.map((result) => {\n      return result.time === time\n        ? { ...result, passed: false, taken: false }\n        : result;\n    });\n    setResults(newResults);\n    if (player) {\n      player.seekTo(time);\n    }\n  };\n\n  const goToQuestion = (time: number) => {\n    if (player) {\n      player.seekTo(time);\n    }\n  };\n\n  const getPlayedState = (state: {\n    played: number;\n    playedSeconds: number;\n    loaded: number;\n    loadedSeconds: number;\n  }) => {\n    setPlayedSeconds(state.playedSeconds);\n  };\n\n  return (\n    <div className='bg-gray-800 min-h-screen min-w-screen'>\n      <div className='container mx-auto flex-row justify-center'>\n        <div className='flex justify-center pt-8'>\n          <VideoControls\n            url={url}\n            getPlayedState={getPlayedState}\n            setPlaying={playing}\n            getPlaying={() => setPlaying(true)}\n            setPlayer={(player) => setPlayer(player)}\n          />\n        </div>\n        <div className='flex justify-center mt-4 max-w-screen-md mx-auto'>\n          <div className='bg-yellow-100 rounded-tr-xl absolute overflow-x-hidden bottom-0 sm:w-10/12 sm:overflow-visible'>\n            <div className='flex flex-row'>\n              <div className='flex flex-column w-2/3 text-left p-3'>\n                {playedSeconds > 0 && (\n                  <QuestionSet\n                    currentStopPoint={currentStopPoint}\n                    answerQuestion={answerQuestion}\n                    playing={playing}\n                  />\n                )}\n              </div>\n              <div className='flex flex-column w-1/3 bg-yellow-200 text-left p-3 mr-5 mb-5'>\n                <Results\n                  results={results}\n                  retryQuestion={retryQuestion}\n                  goToQuestion={goToQuestion}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Layout;\n","import \"./App.css\";\nimport Layout from \"./tailwindcomps/Layout\";\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Layout />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}